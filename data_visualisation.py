import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


class BasicModelDataVisualisation:
    """Class that contains methods to manipulate
    synthetic data generated by a model for ADCC.
    """
    def __init__(self, mu_vals, gamma_vals, data_path):
        self.mu_vals = mu_vals
        self.gamma_vals = gamma_vals
        self.data_path = data_path

        # read in data
        self.df = pd.read_csv(self.data_path)


    def calculate_kill_percentage(self, noise_level):
        """Method that calclates the percetage of cancer cells killed
        at the end of an ADCC assay. This is calculated by taking the ratio of
        the number of cancer cells at time 1 and time 0. A noise level
        is then added by sampling from a uniform distribution. Statistics are then
        calculated for each value of initial antibody concentration. """

        max_data = []
        min_data = []
        mean_data = []

        # Extract data that correspond to desired mu value and noise level. Then 
        # extract the start and end time points.
        for mu in self.mu_vals:
            df1 = self.df.loc[(self.df['mu'] == mu) 
                               & (self.df['noise level'] == noise_level)
                               & (self.df['t'].isin([0.0, 1.0]))]
            
            # instantiate DataFrame to store calculated data
            df_kpercent = pd.DataFrame(columns=['gamma', 'kill percentage'])
            S_data = []
            # for each value of gamma in the filtered data calculate the kill
            # percentage
            for gamma in self.gamma_vals:
                data = df1.loc[df1['gamma'] == gamma]
                S_vals = data['S'].values
                S_data.append(S_vals)
                for i in np.arange(0, len(S_vals)-1, 2):
                   kill_percent = 1 - (S_vals[i + 1]/S_vals[i])
                   df_kpercent = df_kpercent.append({'gamma' : gamma,
                                                    'kill percentage' : kill_percent},
                                                    ignore_index=True)
            
            max_vals = []
            min_vals = []
            mean_vals = []
            
            # calculate basic statistics of kill percentage values for each gamma
            for gamma in self.gamma_vals:
                gamma_data = df_kpercent.loc[df_kpercent['gamma'] == gamma]
                percentage_data = gamma_data['kill percentage'].values
                max_vals.append(percentage_data.max())
                min_vals.append(percentage_data.min())
                mean_vals.append(percentage_data.mean())

            max_data.append(max_vals)
            min_data.append(min_vals)
            mean_data.append(mean_vals)
        
        return max_data, min_data, mean_data





        


